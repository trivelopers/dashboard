üß± TAREA

Desarroll√° una aplicaci√≥n frontend que permita a los clientes de un chatbot (con backend Django y base MongoDB) gestionar:

- Los contactos (usuarios de WhatsApp) que interact√∫an con el bot
- Activar o desactivar manualmente cada contacto (`requireAdmin: true/false`)
- Modificar el prompt del sistema (`botsettings.promptSystem`)
- Ver el historial de chats por contacto
- Gestionar usuarios del equipo (con roles ADMIN, EDITOR, VIEWER)
- Iniciar sesi√≥n de forma segura con JWT y cookies httpOnly

üß∞ STACK TECNOL√ìGICO

- Next.js 14+ o React 18+
- Comunicaci√≥n con API v√≠a `axios` o `fetch` con soporte para cookies httpOnly
- SessionContext para mantener la sesi√≥n activa
- React Hook Form + Yup para formularios
- Tailwind CSS o Chakra UI para UI
- Manejo de CSRF con token desde cookies (`X-CSRFToken` en headers)
- Routing v√≠a Next.js App Router o React Router DOM
- Soporte para m√∫ltiples roles (`ADMIN`, `EDITOR`, `VIEWER`)

üìê P√ÅGINAS Y COMPONENTES

**/login**
- Formulario para iniciar sesi√≥n (email + password)
- Env√≠o de JWT a backend
- Guardar la sesi√≥n en contexto, manejo de cookies y redirecci√≥n

**/dashboard**
- Vista general del estado del bot
- Mostrar nombre del cliente, √∫ltima actualizaci√≥n, cantidad de contactos

**/prompt**
- Textarea editable para `promptSystem`
- Bot√≥n para guardar
- Solo accesible para `ADMIN` y `EDITOR`

**/contacts**
- Tabla con todos los contactos del cliente
  - Campos: `name`, `phoneNumber`, `requireAdmin (bool)`
  - Bot√≥n toggle para activar/desactivar `requireAdmin`
  - Filtro por nombre / tel√©fono
- Solo `ADMIN` y `EDITOR` pueden editar `requireAdmin`

**/chats/[contactId]**
- P√°gina con historial de chat
- Mostrar los mensajes (rol: user o assistant), timestamp y texto
- Estilo tipo WhatsApp

**/users**
- Lista de usuarios registrados del cliente
- Roles asignados
- Posibilidad de agregar nuevos usuarios (solo `ADMIN`)

**Navbar / Layout**
- Mostrar el nombre del cliente
- Logout (borrar cookies + sesi√≥n)
- Mostrar nombre y rol del usuario activo
- Navegaci√≥n seg√∫n permisos RBAC (por ejemplo: `VIEWER` no puede editar ni ver `/users`)

üîê SEGURIDAD & AUTH

- Usar JWT de acceso en cookie httpOnly y refresh autom√°tico si expira
- Implementar protecci√≥n CSRF (`X-CSRFToken` de cookie)
- Validaci√≥n de sesi√≥n y permisos en cada ruta
- Redirecci√≥n autom√°tica a login si no hay sesi√≥n activa
- Solo `ADMIN` puede crear o editar usuarios
- `EDITOR` puede modificar contactos y prompt
- `VIEWER` solo puede visualizar datos

üìù EJEMPLOS DE RUTAS API ESPERADAS

- `POST /api/v1/auth/login/` ‚Üí login
- `POST /api/v1/auth/refresh/` ‚Üí refresh token
- `GET /api/v1/contacts/` ‚Üí listar contactos
- `PATCH /api/v1/contacts/:id/` ‚Üí editar `requireAdmin`
- `GET /api/v1/botsettings/` ‚Üí obtener prompt
- `PATCH /api/v1/botsettings/` ‚Üí modificar prompt
- `GET /api/v1/chats/?contactId=` ‚Üí historial de mensajes
- `GET /api/v1/users/` ‚Üí listar usuarios
- `POST /api/v1/users/` ‚Üí crear usuario
- `GET /api/v1/me/` ‚Üí obtener sesi√≥n actual